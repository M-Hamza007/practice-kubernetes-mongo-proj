apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  namespace: hns
  labels:
    app: mongo-express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
    # app labels to connect the pod to service
      labels:
        app: mongo-express
    spec:
      containers:
      - name: mongo-express
        image: mongo-express
        ports:
        - containerPort: 8081
        env:
        # username and password we gonna read from secrets
        - name: ME_CONFIG_MONGODB_ADMINUSERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongo-root-username
        - name: ME_CONFIG_MONGODB_ADMINPASSWORD
          valueFrom: 
            secretKeyRef:
              name: mongodb-secret
              key: mongo-root-password
        - name: ME_CONFIG_MONGODB_SERVER
          valueFrom:
            # configMapKeyRef isntead of secretKeyRef
            configMapKeyRef:
              # configMap name as mentioned in the ConfigMap service
              name: mongodb-configmap
              key: database_url
---
# In order access mongo-express from the browser, we gonna need an external service for mongo express

# Actually in practice you never have deployment without service so keep it together

apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
spec:
# app selector to connect to the pod 
  selector:
    app: mongo-express
  # to make this service as an external service we need to put a tag, called LoadBalancer
  # it assigns external ip address and so accepts external requests
  # further, it will assign an additional external-ip!
  type: LoadBalancer  
  ports:
    - protocol: TCP
      # service port
      port: 8081
      # container port
      targetPort: 8081
      # port for external IP address
      # port which can be put into the browser
      nodePort: 30000
